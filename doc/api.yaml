openapi: 3.0.0
info:
  title: Restaurant Management API
  description: API for managing restaurant ingredients, dishes, and orders
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /ingredients:
    get:
      tags: [Ingredients]
      summary: Get all ingredients
      description: Retrieve a list of all ingredients with optional price filter
      parameters:
        - name: maxPrice
          in: query
          description: Maximum price to filter ingredients
          schema:
            type: number
            format: double
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '500':
          description: Internal server error

    post:
      tags: [Ingredients]
      summary: Create new ingredients
      description: Create one or more new ingredients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IngredientInput'
      responses:
        '201':
          description: Ingredients created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '400':
          description: Invalid input
        '500':
          description: Internal server error

    put:
      tags: [Ingredients]
      summary: Update existing ingredients
      description: Update one or more existing ingredients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IngredientInput'
      responses:
        '200':
          description: Ingredients updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
        '400':
          description: Invalid input
        '404':
          description: Ingredient not found
        '500':
          description: Internal server error

  /ingredients/{ingredientId}:
    get:
      tags: [Ingredients]
      summary: Get ingredient by ID
      description: Retrieve a specific ingredient by its ID
      parameters:
        - name: ingredientId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientDetails'
        '404':
          description: Ingredient not found
        '500':
          description: Internal server error

  /ingredients/{ingredientId}/prices:
    put:
      tags: [Ingredients]
      summary: Update ingredient prices
      description: Add new prices to the price history of an ingredient
      parameters:
        - name: ingredientId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PriceInput'
      responses:
        '200':
          description: Prices successfully updated
        '400':
          description: Invalid input
        '404':
          description: Ingredient not found
        '500':
          description: Internal server error

  /ingredients/{ingredientId}/stockMovements:
    put:
      tags: [Ingredients]
      summary: Update ingredient stock movements
      description: Add new stock movements to an ingredient
      parameters:
        - name: ingredientId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StockMovementInput'
      responses:
        '200':
          description: Stock movements successfully updated
        '400':
          description: Invalid input
        '404':
          description: Ingredient not found
        '500':
          description: Internal server error

  /dishes:
    get:
      tags: [Dishes]
      summary: Get all dishes
      description: Retrieve a list of all dishes with their ingredients
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DishDetails'
        '500':
          description: Internal server error

  /dishes/{dishId}/ingredients:
    put:
      tags: [Dishes]
      summary: Update dish ingredients
      description: Add or update ingredients for a specific dish
      parameters:
        - name: dishId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DishIngredientInput'
      responses:
        '200':
          description: Dish ingredients updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishDetails'
        '400':
          description: Invalid input
        '404':
          description: Dish not found
        '500':
          description: Internal server error

  /orders/{reference}:
    get:
      tags: [Orders]
      summary: Get order by reference
      description: Retrieve an order by its reference number
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '404':
          description: Order not found
        '500':
          description: Internal server error

  /orders/{reference}/dishes:
    put:
      tags: [Orders]
      summary: Update order dishes
      description: Modify the list of dishes in an order and their quantities
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdateInput'
      responses:
        '200':
          description: Order dishes updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '400':
          description: Invalid input
        '404':
          description: Order not found
        '500':
          description: Internal server error

  /orders/{reference}/dishes/{dishId}:
    put:
      tags: [Orders]
      summary: Update dish status in order
      description: Update the status of a specific dish in an order
      parameters:
        - name: reference
          in: path
          required: true
          schema:
            type: string
        - name: dishId
          in: path
          required: true
          schema:
            type: integer
        - name: status
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/StatusType'
      responses:
        '200':
          description: Dish status updated successfully
        '400':
          description: Invalid status transition
        '404':
          description: Order or dish not found
        '500':
          description: Internal server error

components:
  schemas:
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Tomato"
        unitPrice:
          type: number
          format: double
          example: 2.5
        unit:
          $ref: '#/components/schemas/UnitType'
        updateDateTime:
          type: string
          format: date-time
          example: "2023-05-15T10:30:00Z"

    IngredientInput:
      type: object
      properties:
        name:
          type: string
          example: "Tomato"
        unitPrice:
          type: number
          format: double
          example: 2.5
        unit:
          $ref: '#/components/schemas/UnitType'

    IngredientDetails:
      allOf:
        - $ref: '#/components/schemas/Ingredient'
        - type: object
          properties:
            priceHistory:
              type: array
              items:
                $ref: '#/components/schemas/PriceHistory'
            stockMovements:
              type: array
              items:
                $ref: '#/components/schemas/StockMovement'
            availableQuantity:
              type: number
              format: double
              example: 50.0

    PriceInput:
      type: object
      properties:
        price:
          type: number
          format: double
          example: 2.75
        date:
          type: string
          format: date-time
          example: "2023-05-16T09:00:00Z"

    StockMovementInput:
      type: object
      properties:
        movementType:
          $ref: '#/components/schemas/MovementType'
        quantity:
          type: number
          format: double
          example: 10.0
        unit:
          $ref: '#/components/schemas/UnitType'
        movementDate:
          type: string
          format: date-time
          example: "2023-05-16T10:00:00Z"

    DishDetails:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Margherita Pizza"
        unitPrice:
          type: number
          format: double
          example: 12.99
        availableQuantity:
          type: number
          format: double
          example: 15.0
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/DishIngredient'

    DishIngredientInput:
      type: object
      properties:
        ingredientId:
          type: integer
          example: 1
        quantity:
          type: number
          format: double
          example: 0.2
        unit:
          $ref: '#/components/schemas/UnitType'

    DishIngredient:
      type: object
      properties:
        ingredientId:
          type: integer
          example: 1
        name:
          type: string
          example: "Tomato"
        unitPrice:
          type: number
          format: double
          example: 2.5
        availableQuantity:
          type: number
          format: double
          example: 50.0
        requiredQuantity:
          type: number
          format: double
          example: 0.2
        unit:
          $ref: '#/components/schemas/UnitType'

    OrderDetails:
      type: object
      properties:
        reference:
          type: string
          example: "ORD-2023-0001"
        createdAt:
          type: string
          format: date-time
          example: "2023-05-15T14:30:00Z"
        status:
          $ref: '#/components/schemas/StatusType'
        totalAmount:
          type: number
          format: double
          example: 38.97
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/OrderDish'

    OrderDish:
      type: object
      properties:
        dishId:
          type: integer
          example: 1
        name:
          type: string
          example: "Margherita Pizza"
        unitPrice:
          type: number
          format: double
          example: 12.99
        quantity:
          type: integer
          example: 3
        status:
          $ref: '#/components/schemas/StatusType'

    OrderUpdateInput:
      type: object
      properties:
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/OrderDishUpdate'
        status:
          $ref: '#/components/schemas/StatusType'

    OrderDishUpdate:
      type: object
      properties:
        dishId:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 3

    PriceHistory:
      type: object
      properties:
        price:
          type: number
          format: double
          example: 2.5
        date:
          type: string
          format: date-time
          example: "2023-05-15T10:30:00Z"

    StockMovement:
      type: object
      properties:
        movementId:
          type: integer
          example: 1
        movementType:
          $ref: '#/components/schemas/MovementType'
        quantity:
          type: number
          format: double
          example: 10.0
        unit:
          $ref: '#/components/schemas/UnitType'
        movementDate:
          type: string
          format: date-time
          example: "2023-05-15T11:00:00Z"

    UnitType:
      type: string
      enum: [G, L, U]
      example: "G"

    MovementType:
      type: string
      enum: [ENTRY, EXIT]
      example: "ENTRY"

    StatusType:
      type: string
      enum: [CREATED, CONFIRMED, IN_PREPARATION, FINISHED, COMPLETED, SERVED]
      example: "CREATED"